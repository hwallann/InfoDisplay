@page "/checkout"
@inject OrderState OrderState
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager

<div class="main">
    <EditForm Model="OrderState.Order.DeliveryAddress" OnValidSubmit="PlaceOrder">
        <div class="checkout-cols">
            <div class="checkout-order-details">
                <h4>Review order</h4>
                <OrderReview Order="OrderState.Order" />
            </div>
            <div class="checkout-delivery-address">
                <h4>Deliver to...</h4>
                <AddressEditor Address="@OrderState.Order.DeliveryAddress" />
            </div>
        </div>

        <button class="checkout-button btn btn-warning" type="submit" disabled="@isSubmitting">
            Place order
        </button>

        <DataAnnotationsValidator />
    </EditForm>
</div>

@code {
    
    bool isSubmitting;

    protected async override Task OnInitializedAsync()
    {
        isSubmitting = false;
    }

    async Task PlaceOrder()
    {
        isSubmitting = true;

        try
        {
            var newOrderId = await HttpClient.PostJsonAsync<int>("orders", order);
            
            OrderState.ResetOrder();

            NavigationManager.NavigateTo($"myorders/{newOrderId}");
        }
        catch (Exception e)
        {
            Console.log("Error when placing order")
            System.Console.WriteLine("Error when placing order")
            Console.log(e.Message)
            System.Console.WriteLine(e.Message)
        }
        finally
        {
            isSubmitting = false;
        }

    }
}